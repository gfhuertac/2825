// Generated by CoffeeScript 1.6.3
(function() {
  var cluster, configData, e, fs;

  fs = require('fs');

  cluster = require('cluster');

  configData = {};

  configData.general = {
    apiVersion: "1.0.0",
    serverName: "Pi API OAuth2 Server DEV",
    serverToken: "change-me",
    welcomeMessage: "Hello! Welcome to the brivolabs api",
    flatFileDirectory: __dirname + "/public/",
    flatFileNotFoundMessage: "Sorry, that file is not found :(",
    serverErrorMessage: "The server experienced an internal error",
    defaultChatRoom: "brivolabs",
    defaultLimit: 100,
    defaultOffset: 0,
    workers: 5,
    developmentMode: true,
    pidFileDirectory: process.cwd() + "/pids/",
    simultaneousActions: 5,
    require_accept_version: true,
    generator: function() {
      return Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2);
    },
    qr_max_size: 150,
    cache_qrcodes: true,
    database: {
      user: "cory",
      port: "5432",
      password: "hotcool",
      host: "localhost",
      name: "brivolabs_api_dev",
      override_url: process.env.HEROKU_POSTGRESQL_NAVY_URL,
      reset_tables: process.env.RESET_TABLES
    },
    s3: {
      username: "cs-dev",
      access_key_id: "AKIAIB5ZGDYW6F4JQ4HA",
      secret_access_key: "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",
      bucket_name: "brivolabs-qrcodes",
      use_private_urls: false,
      urls_expire_after: 3600
    }
  };

  configData.logger = {
    transports: []
  };

  if (cluster.isMaster) {
    configData.logger.transports.push(function(api, winston) {
      return new winston.transports.Console({
        colorize: true,
        level: "debug",
        timestamp: api.utils.sqlDateTime
      });
    });
  }

  try {
    fs.mkdirSync("./log");
  } catch (_error) {
    e = _error;
    if (e.code !== "EEXIST") {
      console.log(e);
      process.exit();
    }
  }

  configData.logger.transports.push(function(api, winston) {
    return new winston.transports.File({
      filename: './log/' + api.pids.title + '.log',
      level: "info",
      timestamp: true
    });
  });

  configData.redis = {
    fake: true,
    host: "127.0.0.1",
    port: 6379,
    password: null,
    options: null,
    DB: 0
  };

  configData.faye = {
    mount: "/faye",
    timeout: 45,
    ping: null
  };

  configData.servers = {
    "web": {
      secure: false,
      serverOptions: {},
      port: 80,
      bindIP: "0.0.0.0",
      httpHeaders: {},
      urlPathForActions: "",
      urlPathForFiles: "public",
      rootEndpointType: "",
      directoryFileType: "index.html",
      flatFileCacheDuration: 60,
      fingerprintOptions: {
        cookieKey: "sessionID",
        toSetCookie: true,
        onlyStaticElements: false
      },
      formOptions: {
        uploadDir: "/tmp",
        keepExtensions: false,
        maxFieldsSize: 1024 * 1024 * 100
      },
      returnErrorCodes: false
    }
  };

  exports.configData = configData;

}).call(this);
