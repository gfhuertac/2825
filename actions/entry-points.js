// Generated by CoffeeScript 1.6.3
(function() {
  var exports;

  exports = {
    entryPointsIndex: {
      name: "entryPointsIndex",
      description: "Shows the list of existing entry points",
      inputs: {
        required: [],
        optional: []
      },
      authenticated: true,
      outputExample: {},
      version: 1.0,
      run: function(api, connection, next) {
        return api.entryPoints.find({
          site_id: connection.params.siteid
        }, function(error, entrypoints) {
          connection.error = error;
          connection.response = {
            entrypoints: entrypoints
          };
          return next(connection, false);
        });
      }
    },
    entryPointsCreate: {
      name: "entryPointsCreate",
      description: "Adds a new entry point",
      inputs: {
        required: ["name"],
        optional: []
      },
      authenticated: true,
      outputExample: {},
      version: 1.0,
      run: function(api, connection, next) {
        return api.entryPoints.create({
          name: connection.params.name,
          description: connection.params.name,
          site_id: connection.params.siteid
        }, function(error, entrypoint) {
          connection.error = error;
          connection.response = {
            entrypoint: entrypoint
          };
          return next(connection, false);
        });
      }
    },
    entryPointShow: {
      name: "entryPointShow",
      description: "Shows an existing entry point",
      inputs: {
        required: [],
        optional: []
      },
      authenticated: true,
      outputExample: {},
      version: 1.0,
      run: function(api, connection, next) {
        return api.entryPoints.get(connection.params.id, function(error, entrypoint) {
          connection.error = error;
          connection.response = {
            entrypoint: entrypoint
          };
          return next(connection, false);
        });
      }
    },
    entryPointUpdate: {
      name: "entryPointUpdate",
      description: "Edits an existing entry point of a site",
      inputs: {
        required: ["name"],
        optional: []
      },
      authenticated: true,
      outputExample: {},
      version: 1.0,
      run: function(api, connection, next) {
        return api.entryPoints.get(connection.params.id, function(error, entrypoint) {
          if (error) {
            connection.error = error;
            return next(connection, false);
          } else {
            return entrypoint.save({
              name: connection.params.name,
              description: connection.params.description,
              entryrequest_id: connection.params.entryrequestid,
              site_id: connection.params.siteid
            }, function(error) {
              connection.error = error;
              connection.response = {
                entrypoint: entrypoint
              };
              return next(connection, false);
            });
          }
        });
      }
    },
    entryPointsDestroy: {
      name: "entryPointsDestroy",
      description: "Removes an existing entry point",
      inputs: {
        required: [],
        optional: []
      },
      authenticated: true,
      outputExample: {},
      version: 1.0,
      run: function(api, connection, next) {
        return api.entryPoints.get(connection.params.id, function(error, entrypoint) {
          if (error) {
            connection.error = error;
            return next(connection, false);
          } else {
            return entrypoint.remove(function(error) {
              connection.error = error;
              connection.response = {
                message: "removed successfully"
              };
              return next(connection, false);
            });
          }
        });
      }
    }
  };

  module.exports = exports;

}).call(this);
