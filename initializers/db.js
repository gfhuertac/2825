// Generated by CoffeeScript 1.6.3
(function() {
  var orm;

  orm = require('orm');

  exports.db = function(api, next) {
    var config, create, db, models, _ref;
    config = api.configData.database;
    db = orm.connect((_ref = config.override_url) != null ? _ref : "postgres://" + config.user + ":" + config.password + "@" + config.host + ":" + config.port + "/" + config.name);
    db.on('connect', function(err, db) {
      if (err) {
        throw err;
      }
      return api.log('connected to database', 'info');
    });
    models = {};
    create = function(name, options) {
      if (models[name]) {
        throw "model " + name + " already exists";
      }
      api.log("defining model: " + name, 'info');
      models[name] = db.define(name, options != null ? options.columns : void 0, options);
      if (config.reset_tables) {
        db.on('connect', function(err, db) {
          api.log("creating table for model: " + name, 'info');
          return models[name].drop(function() {
            return models[name].sync(function(err) {
              if (err) {
                throw err;
              }
            });
          });
        });
      }
      return models[name];
    };
    api.clients = create('client', {
      columns: {
        name: String,
        secret: String,
        redirectURL: String
      },
      hooks: {
        beforeCreate: function(cb) {
          this.secret = api.configData.generator();
          return cb();
        }
      },
      validations: {
        name: [orm.enforce.unique(), orm.enforce.ranges.length(3, void 0)]
      }
    });
    api.credentials = create('credentials', {
      columns: {
        value: String
      }
    });
    api.doors = create('doors', {
      columns: {}
    });
    api.entryPoints = create('entry_points', {
      columns: {
        name: String
      }
    });
    api.entryRequests = create('entry_requests', {
      columns: {
        name: String
      }
    });
    api.groups = create('groups', {
      columns: {}
    });
    api.identities = create('identities', {
      columns: {
        firstName: String,
        lastName: String,
        email: String
      }
    });
    api.qrcodes = create('qrcodes', {
      columns: {
        hcode: String,
        qrdata: String,
        location: String,
        until: Number
      }
    });
    api.schedules = create('schedules', {
      columns: {
        startDateTime: Date,
        endDateTime: Date
      }
    });
    api.sites = create('sites', {
      columns: {
        name: String
      }
    });
    api.tokens = create('tokens', {
      columns: {
        data: String,
        tokenType: Number
      }
    });
    api.users = create('users', {
      columns: {
        externalId: String
      }
    });
    api.widgets = create('widgets', {
      columns: {
        name: String,
        description: String
      }
    });
    api.credentials.hasOne('user', api.users, {
      required: true
    }, {
      reverse: 'credentials'
    });
    api.groups.hasOne('schedule', api.schedules, {});
    api.groups.hasMany('doors', api.doors, {});
    api.groups.hasMany('users', api.doors, {}, {
      reverse: 'groups'
    });
    api.entryPoints.hasOne('site', api.sites, {
      required: true
    });
    api.entryRequests.hasMany('tokens', api.tokens, {}, {
      reverse: 'entryRequests'
    });
    api.entryRequests.hasMany('entryPoints', api.entryPoints, {}, {
      reverse: 'entryRequests'
    });
    api.entryRequests.hasMany('schedules', api.schedules, {}, {
      reverse: 'entryRequests'
    });
    api.entryRequests.hasMany('identities', api.identities, {}, {
      reverse: 'entryRequests'
    });
    return next();
  };

  modules.exports = exports;

}).call(this);
